
     const square = function(x) { // a funtion start with "funtion" expresion"  Functions have a set of parameters (in this case, only x) and a body
     return x * x;
     };

     console.log(square(12));
    // → 144

    const makeNoise = function() {
    console.log("Pling!");
     };

    makeNoise();
    // → Pling!

    const power = function(base, exponent) {
     let result = 1;
    for (let count = 0; count < exponent; count++) {
    result *= base;
     }
     return result;
     };

    console.log(power(2, 10));
    // → 1024

DECLARATION NOTATION --- 
                There is a slightly shorter way to create a function binding. When the function keyword is used at the start of a statement, it works differently.
                function square(x) {
                    return x * x;
                  }
ARROW FUNTIONS ---
                There’s a third notation for functions, which looks very different from the others. Instead of the function keyword, it uses an arrow (=>) made up of an equal sign and a greater-than character 
                const power = (base, exponent) => {
                    let result = 1;
                    for (let count = 0; count < exponent; count++) {
                      result *= base;
                    }
                    return result;
                  };


--- DATA STRUCTURES ---

      PROPERTIES ---
           access to properties "." or "[]" 
             When using a dot, the word after the dot is the literal name of the property
             When using square brackets, the expression between the brackets is evaluated to get the property name

--- DATA SETS ---

       LIST---
          let listOfNumbers = [2, 3, 5, 7, 11];
          console.log(listOfNumbers[2]);
          // → 5
         console.log(listOfNumbers[0]);
          // → 2
        console.log(listOfNumbers[2 - 1]);
        // → 3

        Both value.x and value[x] access a property on value—but not necessarily the same property.
        So if you know that the property you are interested in is called color, you say value.color
        So if you want to access a property named 2 or John Doe, you must use square brackets: value[2] or value["John Doe"].
        Every string has a toUpperCase property. When called, it will return a copy of the string in which all letters have 
        been converted to uppercase. There is also toLowerCase, going the other way.
        
        let sequence = [1, 2, 3];
        sequence.push(4);
        sequence.push(5);
        console.log(sequence);
        // → [1, 2, 3, 4, 5]
        console.log(sequence.pop());
        // → 5
        console.log(sequence);
        // → [1, 2, 3, 4]
       
       The push method adds values to the end of an array, and the pop method does the opposite, removing the last value in the array and returning it.

       OBJECTS ---
         Values of the type object are arbitrary collections of properties. One way to create an object is by using braces as an expression.
          let day1 = {
          squirrel: false,
          events: ["work", "touched tree", "pizza", "running"]
           };
         console.log(day1.squirrel);
         // → false
         console.log(day1.wolf);
        // → undefined
        day1.wolf = false;
        console.log(day1.wolf);
       // → false